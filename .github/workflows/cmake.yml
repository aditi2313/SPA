name: CMake

on: 
  push:
    branches:
      - master      
  pull_request:
    branches:
      - master
  workflow_dispatch: {}
  

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # run a job even if other OS job fails
      matrix:
        os: [macos-latest, windows-latest]
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      working-directory: Team05/Code05
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Unit Tests on macOS
      working-directory: ${{github.workspace}}/build/src/unit_testing
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail      
      if: runner.os == 'macOS'
      run: ./unit_testing       
      shell: bash

    - name: Unit Tests on Windows
      working-directory: ${{github.workspace}}/build/src/unit_testing
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail      
      if: runner.os == 'Windows'
      run: ./Release/unit_testing.exe       
      shell: bash

    - name: Integration Tests on macOS
      working-directory: ${{github.workspace}}/build/src/integration_testing      
      if: runner.os == 'macOS'
      run: ./integration_testing
      shell: bash

    - name: Integration Tests on Windows
      working-directory: ${{github.workspace}}/build/src/integration_testing      
      if: runner.os == 'Windows'
      run: ./Release/integration_testing.exe
      shell: bash

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        
    - name: Run system tests on macOS
      if: runner.os == 'macOS'
      run: |
        python ${{github.workspace}}/Team05/Tests05/test_runner.py ${{github.workspace}}/build/src/autotester/autotester
        if [ "$?" -ne "0" ]; then
          echo "Program failed with exit code $?"
          exit 1
        fi      
                
    - name: Run system tests on Windows
      if: runner.os == 'Windows'
      run: |
        python ${{github.workspace}}\Team05\Tests05\test_runner.py ${{github.workspace}}/build/src/autotester/Release/autotester.exe
        if ($LASTEXITCODE -ne 0) {
            Write-Host "Program failed with exit code $LASTEXITCODE"
            exit 1
        }

    - name: Cache system test out.xml files
      if: runner.os == 'macOS'
      uses: actions/cache@v3
      with:
        path: |
          ${{github.workspace}}/Team05/Tests05/out
        key: ${{ runner.os }}-out-xml-cache-${{ hashFiles('**/Team05/Tests05/out/**') }}
        restore-keys: |
          ${{ runner.os }}-out-xml-cache-
  
  update_query_stats:
    # Runs the python script for analysing query statistics and 
    # directly adds the updated statistics as a commit to your PR
    runs-on: macos-latest
    needs: build
    env: 
      should-skip: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref}}
          fetch-depth: 0 # otherwise there would be errors pushing refs to the destination repository

      - name: Skip if it is on master branch
        run: |
          if [ "${{ github.ref_name }}" = "master" ]; then
            echo "should-skip=true" >> $GITHUB_ENV
          fi

      - name: Check commit message contains [with stats]
        run: |
          if echo "$(git log -1 --format=%B)" | grep -q '\[with stats\]'; then
            echo "Commit message contains [with stats]"
          else
            echo "should-skip=true" >> $GITHUB_ENV
          fi

      - name: Restore cached out.xml files
        uses: actions/cache@v3 
        if: env.should-skip == 'false'
        with:
          fail-on-cache-miss: true
          path: ${{github.workspace}}/Team05/Tests05/out
          key: ${{ runner.os }}-out-xml-cache-${{ hashFiles('**/Team05/Tests05/out/**') }}

      - name: Set up Python
        if: env.should-skip == 'false'
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Run query statistics analysis
        if: env.should-skip == 'false'
        run: |
          python ${{github.workspace}}/Team05/Tests05/out_analysis.py 
    
      - name: Commit query statistics files
        if: env.should-skip == 'false'
        run: |
          git config --local user.email "39623254+aizatazhar@users.noreply.github.com"
          git config --local user.name "aizatazhar"
          git commit -a -m "Update out_analysis files"
      
      # Sadly need to use a PAT otherwise the on push workflows
      # won't be triggered when the commit is added to the PR
      # https://github.com/orgs/community/discussions/25702
      # But since we don't own the organisation, we can't
      # generate a PAT with write access :(
      # Alternative is to close and reopen the PR to
      # trigger the workflows
      - name: Push changes
        if: env.should-skip == 'false'
        uses: ad-m/github-push-action@master
        with:
          branch: ${{ github.head_ref }}